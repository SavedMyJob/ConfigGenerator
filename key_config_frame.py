# key_config_frame.py
import tkinter as tk
from tkinter import ttk
from command_frame import CommandFrame

class KeyConfigFrame(ttk.Frame):
    def __init__(self, parent, key_number, command_types, spells_tab, variable_names):
        """
        Parameters:
            parent (ttk.Frame): The parent frame.
            key_number (int): The number of the key for which this is a configuration frame.
            command_types (list): A list of available command types.
            spells_tab (SpellsTab): The SpellsTab instance.
            variable_names (list): A list of variable names.
        """

        super().__init__(parent)
        self.key_number = key_number
        self.command_types = command_types
        self.spells_tab = spells_tab
        self.variable_names = variable_names
        self.commands = []
        self.create_widgets()

    def create_widgets(self):
        """
        Creates the widgets for the KeyConfigFrame.

        This function creates a frame, a label within the frame, another frame to hold the commands, and a button to add a command.
        The label is packed to the left of the first frame with the text "Key <key_number>:".
        The second frame is packed to fill the x-axis and expand in both directions.
        The button is packed with a 5 pixel padding on the y-axis.
        """
        frame = ttk.Frame(self)
        frame.pack(anchor='w', fill='x')

        self.label = ttk.Label(frame, text=f"Key {self.key_number}:")
        self.label.pack(side='left')

        self.commands_frame = ttk.Frame(self)
        self.commands_frame.pack(fill='x', expand=True)
        
        self.add_command_button = ttk.Button(self, text="Add Command", command=self.add_command)
        self.add_command_button.pack(pady=5)

    def add_command(self):
        """
        Adds a new command to the key configuration.

        This function creates a new CommandFrame instance and adds it to the list of commands.
        The new command is added to the end of the list of commands.
        """
        command_frame = CommandFrame(self.commands_frame, self.command_types, lambda: self.remove_command(command_frame), self.spells_tab, self.variable_names)
        command_frame.pack(fill='x', pady=2)
        self.commands.append(command_frame)

    def remove_command(self, command_frame):
        """
        Removes a command from the key configuration.

        This function removes a command from the list of commands and destroys the widget associated with the command.

        Parameters
        ----------
        command_frame : CommandFrame
            The command frame to remove from the key configuration.
        """

        if command_frame in self.commands:
            self.commands.remove(command_frame)
            command_frame.destroy()

    def get_config(self):
        """
        Generates the configuration string for the key configuration.

        This function will generate a string of the form "keys=<command>|<command>|..."
        or "keysX=<command>|<command>|..." where X is the key number if the key number is not 1.

        The generated configuration string will be empty if there are no commands in the key configuration.

        Returns
        -------
        str
            The generated configuration string.
        """
        commands = [command.get_command() for command in self.commands if command.get_command()]
        if not commands:
            return ""

        # Generate key identifier based on key number
        key_identifier = 'keys' if self.key_number == 1 else f'keys{self.key_number}'

        return f"{key_identifier}=" + "|".join(commands)

    def update_variable_names(self, variable_names):
        """
        Updates the list of variable names for the key configuration.

        This function updates the list of variable names used by the key configuration and all commands in the key configuration.

        Parameters
        ----------
        variable_names : list
            The new list of variable names.
        """
        self.variable_names = variable_names
        for command in self.commands:
            command.update_variable_names(variable_names)

    def get_key_config_data(self):
        """
        Generates the configuration data for the key configuration.

        This function will generate a dictionary with a single key 'commands' whose value is a list of command data dictionaries.
        Each command data dictionary is generated by the get_command_data method of a CommandFrame instance.

        Returns
        -------
        dict
            The generated configuration data.
        """
        commands_data = []
        for command in self.commands:
            commands_data.append(command.get_command_data())
        return {
            'commands': commands_data
        }

    def set_key_config_data(self, data):
        """
        Sets the configuration data for the key configuration.

        This function will set the configuration data for the key configuration from a given data dictionary.
        The data dictionary should have a single key 'commands' whose value is a list of command data dictionaries.
        Each command data dictionary is used to set the configuration data of a CommandFrame instance.

        Parameters
        ----------
        data : dict
            The data dictionary containing the configuration data for the key configuration.

        Returns
        -------
        None
        """
        commands_data = data.get('commands', [])
        # Remove existing commands
        for command in self.commands[:]:
            self.remove_command(command)
        # Add commands from data
        for command_data in commands_data:
            self.add_command()
            self.commands[-1].set_command_data(command_data)

    def update_key_number(self, new_key_number):
        """
        Updates the key number of the key configuration.

        This function updates the key number of the key configuration and the text of the label to display the new key number.

        Parameters
        ----------
        new_key_number : int
            The new key number to use.
        """
        self.key_number = new_key_number
        self.label.config(text=f"Key {self.key_number}:")
